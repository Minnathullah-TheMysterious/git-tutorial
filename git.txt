cmd --> Opens the present directory on the command line 
cd --> Change Directory. Used to change the Directory
q --> To break the command

**********************Git Commands*********************
> git config --global user.name "Enter Username Here" 
> git config --global email "Enter email Here"
> git config --list      [To see all the information regarding user]
> git config user.name       [To see name of the user]
> git config user.email       [To see email of the user]

> git status    [current status of git repository]
> git init      [initializes the folder as git repository]
> git add -a     [Puts all the files in the staging area]
> git commit -m "initial commit"     [To commit]
> rm -rf .git     [Used to delete the git repository (danger)]
> git clone anyReopUrl     [clones the reop from server to your system]
> git add fileName     [Brings the file to the staging area]
> touch first.txt     [A file gets created in the name of first.txt]
> touch .gitignore     [.gitignore file gets created]
> git diff      [Compares working directory with staging area]
> git diff --staged     [Compares previous commit with staging area]
> git commit -a -m "comment"     [skipping staging area/ direct commit (untracked files can't be commited directly, It is for tracked files only)]
> git rm fileName     [to remove any file from the repository]
> git mv fileName renamedFileName     [To rename the file name]
> git rm --cached fileName       [Used to untrack any file which has been tracked till now]

> git log     [information of all the previous commits]
> git log -p     [to see which line is committed, which is removed , which is added]
> git log -p -3     [cand see 3 commits along with diff.]
> git log --stat     [shows commits very briefly]
> git log --pretty=online      [all the commits shown in one line, Helpful to take prints]
> git log --pretty=short      [shows commits very shortly. (*Author name. *Commit. *Message)]
> git log --pretty=full      [shows commits very shortly. (*Author name. *Commit. *Message. and some more details)]
> git log --since=2.days      [work done in past 2 days]
> git log --since=2.weeks      [work done in past 2 weeks]
> git log --since=2.months      [work done in past 2 months]
> git log --since=2.years      [work done in past 2 years]
> git log --since=2.hour      [work done in past 2 hour]
> git log --since=2.days      [work done in past 2 days]
> git log --pretty=format:"%h -- %an"       [can be found on git-log documentation website (go there to find more)]

> git commit --amend      [to change anybody's commit {
    > it will take you to the vim editor
    > type 'i' to edit
    > then press "esc" to write at the bottom of the screen
    > then type ":wq" & then press "enter"
    > now again type(
        > git log -p -1 to see the changes in the message
    )
}]

>